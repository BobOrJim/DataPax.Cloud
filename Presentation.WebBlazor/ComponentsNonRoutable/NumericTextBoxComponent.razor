@*@inject ProtectedLocalStorage LocalStorage
@inject ProtectedSessionStorage SessionStorage*@

<!-- Spinners = always show -->
<style>
/*    Endast för pattern ändra utseende på knappar*/
    input[type=number]::-webkit-inner-spin-button { opacity: 1 }
/*    input[type=number]::-webkit-outer-spin-button { opacity: 1 }*/
/*för att göra osynliga knappar*/
/*    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;*/
    
</style>

<div>
    <input class=@CssClassStyle step="1" type="number" min=@MinValue max="@MaxValue" @bind-value="@CurrentValue" required @oninput="OnInput"  >
</div>

@code {

    [Parameter]
    public string CssClassStyle { get; set; }
    [Parameter]
    public string ThisComponentInstanceName { get; set; } //Används för LocalStorage namn i Browser.
    [Parameter]
    public int MinValue { get; set; }
    [Parameter]
    public int MaxValue { get; set; }
    [Parameter]
    public int CurrentValue { get; set; } = 1;
    [Parameter]
    public Action ActionEventCallback { get; set; }

    private async Task Up()
    {
        CurrentValue += 1;
        Debug.WriteLine($"Up..{CurrentValue}");
    }
    private async Task Down()
    {
        CurrentValue -= 1;
        Debug.WriteLine($"Down..{CurrentValue}");
    }


    private async Task OnInput()
    {
        //CurrentValue = this.CurrentValue;
        //Debug.WriteLine($"OnInput.....{CurrentValue}");
        //await LocalStorage.SetAsync(ThisComponentInstanceName, CurrentValue);
        ActionEventCallback?.Invoke();
    }

}


