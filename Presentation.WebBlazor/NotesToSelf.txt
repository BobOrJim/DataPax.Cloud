Liu:


CoreBusiness = Domain här (kan existera utan application), har inga beroenden.
- Två mappar i denna
- Models
- Services

UseCases = Application här







@using Syncfusion.Blazor.Inputs
@inject ProtectedLocalStorage LocalStorage
@inject ProtectedSessionStorage SessionStorage


@code{
    //https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SfNumericTextBox-1.html
}

    <SfNumericTextBox TValue="int?" Value="@NumericValue">
        <!-- Använder inte denna input, då jag inte vill spara samma data på två ställen -->
        <NumericTextBoxEvents TValue="int?" ValueChange="OnChange"></NumericTextBoxEvents>
    </SfNumericTextBox>

    @code {
        [Parameter]
        public string? MyInstanceName { get; set; } //Används för LocalStorage namn i Browser.

        [Parameter]
        public int? NumericValue { get; set; }

        [Parameter]
        public Action ActionValueChanged { get; set; } //Input här kopplas till detta Event.

        private bool hasRendered = false;

        //public void OnChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<int?> args) //Orginal
        public async Task OnChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<int?> args) //User change the value
        {
            //hasRendered = true;
            NumericValue = (int)args.Value;
            Debug.WriteLine(" User click event update of  UpdateNumericValue ");
            await LocalStorage.SetAsync(MyInstanceName, NumericValue);
            StateHasChanged();
            ActionValueChanged?.Invoke();
        }
        public async Task UpdateNumericValue(int? value) //Program change the value
        {
            //hasRendered = true;
            NumericValue = value;
            Debug.WriteLine(" Program update of  UpdateNumericValue ");
            await LocalStorage.SetAsync(MyInstanceName, NumericValue);
            StateHasChanged();
        }

        public async Task myControlledUpdate()
        {
            var result = await LocalStorage.GetAsync<int>(MyInstanceName);
            NumericValue = result.Success ? result.Value : 0;
            Debug.WriteLine($" myControlledUpdate = {NumericValue} ");
            StateHasChanged();
        }

        protected override async Task OnInitializedAsync()  //Litet fulhack här....kan utgå...
        {
            myControlledUpdate();
        }
    }







